Higher Order Functions.

Practice

Write a function called each which accepts two parameters: an array and a callback function. The each function should loop over the array passed to it and run the callback function on each element in it.

function each (arr, callback) {
    for (let i = 0; i < arr.length; i++) {
        callback(arr[i]);
    }
}

each([1,2,3,4], function(val){
    console.log(val * 10);
});

Exercise

1. Write a function called map which accepts two parameters: an array and a callback. The map function should return a new array with the result of each value being passed to the callback function. Here's an example:

function map (arr, callback) {
    let result = [];
    for (let i = 0; i < arr.length; i++) {
    let arrVal = callback(arr[i]);
        result.push(arrVal);
    }
    return result;
}

map([1,2,3,4], function(val){
    return val * 2;
}); // [2,4,6,8]


2. Write a function called reject which accepts two parameters an array and a callback. The function should return a new array with all of the values that do not return true to the callback. Here are two examples:

function reject (arr, callback) {
    let result = [];
    for (let i = 0; i < arr.length; i++) {
        if (!callback(arr[i])) {
            result.push(arr[i]);
        } else {
            arr[i] = null;
        }
    }
    return result;
}

reject([1,2,3,4], function(val){
    return val > 2;
}); // [1,2]

reject([2,3,4,5], function(val){
    return val % 2 === 0;
}); // [3,5]