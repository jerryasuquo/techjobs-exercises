{"version":3,"sources":["components/CardList.js","components/array.js","App.js","reportWebVitals.js","index.js"],"names":["CardList","props","myFriendsList","myFriends","map","friend","index","id","src","alt","className","name","username","email","website","friends","App","handleChange","e","setState","searchInput","target","value","console","log","state","fetch","then","data","json","jsonRes","catch","err","filteredFriends","this","filter","toLowerCase","includes","type","placeholder","onChange","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAEe,SAASA,EAASC,GAAQ,IAEjCC,EADgBD,EAAdE,UACwBC,KAAI,SAACC,EAAQC,GAC3C,OACE,sBAAqBC,GAAG,YAAxB,UACE,qBAAKC,IAAG,+BAA0BH,EAAOE,IAAME,IAAI,eACnD,oBAAIC,UAAU,KAAd,SAAoBL,EAAOM,OAC3B,mBAAGD,UAAU,WAAb,SAAyBL,EAAOO,WAChC,mBAAGF,UAAU,WAAb,SAAyBL,EAAOQ,QAChC,mBAAGH,UAAU,aAAb,SAA2BL,EAAOS,YAL1BT,EAAOE,OAUrB,OAAO,qBAAKA,GAAG,iBAAR,SAA0BL,IChB5B,IAAMa,EAAU,CACnB,CAACR,GAAI,EAAGI,KAAM,aAAcC,SAAU,YAAaC,MAAO,0BAC1D,CAACN,GAAI,EAAGI,KAAM,cAAeC,SAAU,UAAWC,MAAO,0BACzD,CAACN,GAAI,EAAGI,KAAM,gBAAiBC,SAAU,cAAeC,MAAO,uBAC/D,CAACN,GAAI,EAAGI,KAAM,iBAAkBC,SAAU,WAAYC,MAAO,oBAC7D,CAACN,GAAI,EAAGI,KAAM,mBAAoBC,SAAU,SAAUC,MAAO,mBAC7D,CAACN,GAAI,EAAGI,KAAM,mBAAoBC,SAAU,aAAcC,MAAO,qBACjE,CAACN,GAAI,EAAGI,KAAM,gBAAiBC,SAAU,YAAaC,MAAO,oBAC7D,CAACN,GAAI,EAAGI,KAAM,cAAeC,SAAU,WAAYC,MAAO,qBAC1D,CAACN,GAAI,EAAGI,KAAM,kBAAmBC,SAAU,uBAAwBC,MAAO,uBAC1E,CAACN,GAAI,GAAII,KAAM,oBAAqBC,SAAU,UAAWC,MAAO,sBC6CrDG,E,kDAlDb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAmBRgB,aAAe,SAACC,GACd,EAAKC,SACH,CACEC,YAAaF,EAAEG,OAAOC,QAExB,kBAAMC,QAAQC,IAAI,YAAa,EAAKC,MAAML,iBAvB5C,EAAKK,MAAQ,CACXV,QAASA,EACTK,YAAa,IAJE,E,gEAQE,IAAD,OAClBM,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GACLP,QAAQC,IAAIM,GACZ,EAAKX,SAAS,CACZJ,QAASe,OAGZC,OAAM,SAACC,GAAD,OAAST,QAAQC,IAAIQ,Q,+BAYtB,IAAD,OACDC,EAAkBC,KAAKT,MAAMV,QAAQoB,QAAO,SAAC9B,GACjD,OAAOA,EAAOM,KAAKyB,cAAcC,SAAS,EAAKZ,MAAML,gBAGvD,OACE,gCACE,sBAAMb,GAAG,aAAT,SACE,uBACE+B,KAAK,OACLC,YAAY,YACZhC,GAAG,cACHiC,SAAUN,KAAKjB,iBAGnB,cAACjB,EAAD,CAAUG,UAAW8B,W,GA7CXQ,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.954692aa.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function CardList(props) {\n  const { myFriends } = props;\n  const myFriendsList = myFriends.map((friend, index) => {\n    return (\n      <div key={friend.id} id=\"cards-div\">\n        <img src={`https://robohash.org/${friend.id}`} alt=\"footballar\" />\n        <h2 className=\"tc\">{friend.name}</h2>\n        <p className=\"tc uname\">{friend.username}</p>\n        <p className=\"tc email\">{friend.email}</p>\n        <p className=\"tc website\">{friend.website}</p>\n      </div>\n    );\n  });\n\n  return <div id=\"card-container\">{myFriendsList}</div>;\n}\n","export const friends = [\n    {id: 1, name: 'Marc Andre', username: 'MarcAndre', email: 'olabisisalam@gmail.com'},\n    {id: 2, name: 'Ngolo Kante', username: 'j-angel', email: 'jannelle2505@gmail.com'},\n    {id: 3, name: 'Sunday Oliseh', username: 'electrified', email: 'ethen1234@gmail.com'},\n    {id: 4, name: 'Modupe Flavour', username: 'madamDup', email: 'modupe@gmail.com'},\n    {id: 5, name: 'Tosin Olanrewaju', username: 'T-girl', email: 'tgirl@gmail.com'},\n    {id: 6, name: 'Cardinal Sampson', username: 'sampsonian', email: 'sampson@gmail.com'},\n    {id: 7, name: 'Boris Johnson', username: 'borisious', email: 'jboris@gmail.com'},\n    {id: 8, name: 'Donald Tusk', username: 'Tuskyboy', email: 'donladt@gmail.com'},\n    {id: 9, name: 'Kayode Goodluck', username: 'electrifgoodluckyboy', email: 'kgoodluck@gmail.com'},\n    {id: 10, name: 'Bolanle Thommpson', username: 'bolatop', email: 'bolanle@gmail.com'}\n    ] ","import React from \"react\";\nimport CardList from \"./components/CardList\";\nimport { friends } from \"./components/array\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friends: friends,\n      searchInput: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((data) => data.json())\n      .then((jsonRes) => {\n        console.log(jsonRes);\n        this.setState({\n          friends: jsonRes,\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  handleChange = (e) => {\n    this.setState(\n      {\n        searchInput: e.target.value,\n      },\n      () => console.log(\"InputTest\", this.state.searchInput)\n    );\n  };\n\n  render() {\n    const filteredFriends = this.state.friends.filter((friend) => {\n      return friend.name.toLowerCase().includes(this.state.searchInput);\n    });\n\n    return (\n      <div>\n        <form id=\"search-box\">\n          <input\n            type=\"text\"\n            placeholder=\"search...\"\n            id=\"searchInput\"\n            onChange={this.handleChange}\n          />\n        </form>\n        <CardList myFriends={filteredFriends} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}