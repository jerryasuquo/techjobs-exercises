Functions Exercises.

Part 1

1. difference
this function takes in two parameters and returns the difference of the two;

function difference (a, b) {
    return a - b;
}

difference(2,2); // 0
difference(0,2); // -2

2. product
this function takes in two parameters and returns the product of the two;

function difference (a, b) {
    return a * b;
}

product(2,2); // 4
product(0,2); // 0

3. printDay
this function takes in one parameter (a number from 1-7) and returns the day of the week (1 is Sunday, 2 is Monday, 3 is Tuesday etc.). If the number is less than 1 or greater than 7, the function should return undefined;

function printDay (day) {
    if (day === 1) {
        return day + " is Sunday";
    } else if (day === 2) {
        return day + " is Monday";
    } else if (day === 3) {
        return day + " is Tuesday";
    } else if (day === 4) {
        return day + " is Wednesday";
    } else if (day === 5) {
        return day + " is Thursday";
    } else if (day === 6) {
        return day + " is Friday";
    } else if (day === 7) {
        return day + " is Saturday";
    }
    return day;
}

4. lastElement
this function takes in one parameter (an array) and returns the last value in the array. It should return undefined if the array is empty.

function lastElement (arr) {
    for (let i = 0; i < arr.length; i++) {
        lastElem = arr[arr.length - 1];
        return lastElem;
    }
    return lastElement;
}

lastElement([1,2,3,4]); // 4
lastElement([]); // undefined

5. numberCompare
this function takes in two parameters (both numbers). If the first is greater than the second, this function returns "First is greater". If the second number is greater than the first, the function returns "Second is greater". Otherwise the function returns "Numbers are equal"

function numberCompare (a, b) {
    if (a > b) {
        return 'First is greater';
    } else if (a < b) {
        return 'Second is greater';
    }
    return 'Numbers are equal';
}

numberCompare(1,1); // "Numbers are equal"
numberCompare(2,1); // "First is greater"
numberCompare(1,2); // "Second is greater"

6. singleLetterCount
this function takes in two parameters (two strings). The first parameter should be a word and the second should be a letter. The function returns the number of times that letter appears in the word. The function should be case insensitive (does not matter if the input is lowercase or uppercase). If the letter is not found in the word, the function should return 0.

function singleLetterCount (str1, str2) {
    let letterCount = 0;
    for (key of str1) {
        if (key.toLowerCase() === str2.toLowerCase()) {
            letterCount = letterCount + 1;
        }
    }
    return letterCount;
}

singleLetterCount('amazing','A'); // 2
singleLetterCount('Inf-Paces School','o'); // 2

Part 2

1. multipleLetterCount
this function takes in one parameter (a string) and returns an object with the keys being the letters and the values being the count of the letter.

function multipleLetterCount (str) {
    let letterCount = {}
    for (letter of str) {
        if (!!letterCount[letter]) {
            letterCount[letter] += 1;
        } else {
            letterCount[letter] = 1;
        }
    }
    return letterCount;
}

multipleLetterCount("hello"); // {h:1, e: 1, l: 2, o:1}
multipleLetterCount("person"); // {p:1, e: 1, r: 1, s:1, o:1, n:1}

2. arrayManipulation
this function should take in at most four parameters (an array, command, location, and value).
If the command is "remove" and the location is "end", the function should remove the last value in the array and return the value removed. (In this case, the function only needs three arguments.)
If the command is "remove" and the location is "beginning", the function should remove the first value in the array and return the value removed. (In this case, the function only needs three arguments.)
If the command is "add" and the location is "beginning", the function should add the value (fourth parameter) to the beginning of the array and return the array.
If the command is "add" and the location is "end", the function should add the value (fourth parameter) to the end of the array and return the array.

function arrayManipulation (arr, command, loc, val) {
  let result;
  for (let i = 0; i < arr.length; i++) {
    if (command === "remove" && loc === "end") {
      return result = arr.pop()
    } else if (command === "remove" && loc === "beginning") {
      return result = arr.shift()
    } else if (command === "add" && loc === "beginning") {
       arr.unshift(val)
	return arr
    } else if (command === "add" && loc === "end") {
      arr.push(val)
	return arr;
    }
  }
  return result;
}

arrayManipulation([1,2,3], "remove", "end"); // 3
arrayManipulation([1,2,3], "remove", "beginning"); // 1
arrayManipulation([1,2,3], "add", "beginning", 20); // [20,1,2,3]
arrayManipulation([1,2,3], "add", "end", 30); // [1,2,3,30]

3. isPalindrome
A Palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward. This function should take in one parameter and returns true or false if it is a palindrome. As a bonus, allow your function to ignore whitespace and capitalization so that isPalindrome('a man a plan a canal Panama'); returns true

function isPalindrome (str) {
let reverse = str.toLowerCase().split("").reverse().join("")

 if (str.toLowerCase() != reverse) {
    return false;
  }

  return true;
}

isPalindrome('testing'); // false
isPalindrome('tacocat'); // true
isPalindrome('hannah'); // true
isPalindrome('robert'); // false

Part 3

1. Rock / Paper / Scissor
using your knowledge so far, build a game of Rock/Paper/Scissor where through the use of the prompt function, a user can enter their choice and based on a random selection - they can either tie/win or lose against a computer.

function rockPaperScissor (arr, user) {
   let result = "";
   let sys = "paper";
   let randomNum = Math.floor(Math.random() * 3);

   for (let i = 0; i < arr.length; i++) {
      let randomElem = arr[randomNum];
      result = randomElem;

      if (user.toLowerCase() == sys) {
         return "Tie"
      } else if (user.toLowerCase() == result) {
         return "Win"
      } else if (user.toLowerCase() != sys && user.toLowerCase() != result) {
         return "Miss"
      }

   }

   return sys;
}

rockPaperScissor(["rock", "paper", "scissor"], prompt());